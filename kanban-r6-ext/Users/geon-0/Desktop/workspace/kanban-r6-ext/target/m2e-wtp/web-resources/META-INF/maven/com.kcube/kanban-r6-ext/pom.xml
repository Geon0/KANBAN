<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.kcube</groupId>
	<artifactId>kanban-r6-ext</artifactId>
	<version>kanban-r6-ext</version>
	<packaging>war</packaging>
	<name>kanban-r6-ext Maven Webapp</name>
	<!-- FIXME change it to the project's website -->
	<url>http://portal.kanban.com</url>

	<properties>
		<release.version>1.0</release.version>
		<jdk.version>1.8</jdk.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<yuicompressor.version>2.4.7</yuicompressor.version>
		<!-- 인터넷이 안되는 환경에서도 사용 가능하게 -->
		<yuicompressor-jar>${pom.basedir}/lib/yuicompressor-${yuicompressor.version}.jar</yuicompressor-jar>
		<!-- 개발 환경에 따라 로컬인지 개발서버인지 운영인지 나눠서 작업하고 싶을 경우 사용 현재는 해당 BUILD 값에 따라서 license 파일을 개발용 운영용으로 바꿔줌. 운영 라이센스를 적용하고 싶으면 maven 
			install 시에 Profiles 옵션으로 real 을 주면 운영라이센스로 war 가 묶인다. -->
		<BUILD>dev</BUILD>
	</properties>

	<profiles>
		<!-- 운영용 라이센스를 적용하기 위한 환경값 -->
		<profile>
			<id>prod</id>
			<properties>
				<BUILD>prod</BUILD>
			</properties>
		</profile>
	</profiles>

	<!-- local repository -->
	<repositories>
		<repository>
			<id>kcube-local</id>
			<name>local repository</name>
			<url>file://${pom.basedir}/lib</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<!-- <scope>test</scope> -->
			<!-- 인터넷이 안되는 환경에서도 사용 가능하게 -->
			<scope>system</scope>
			<systemPath>${pom.basedir}/lib/junit-3.8.1.jar</systemPath>
		</dependency>
		
		<!-- Start r6 project 를 dependency 로 추가 -->
		<dependency>
			<groupId>com.kcube</groupId>
			<artifactId>r6</artifactId>
			<version>1.5</version>
			<classifier>kcube</classifier>
		</dependency>
		<dependency>
			<groupId>com.kcube</groupId>
			<artifactId>r6</artifactId>
			<version>1.5</version>
			<type>war</type>
		</dependency>
		
		<!-- local jar 를 compile 시에만 사용하고 WAS 에는 복사하지 않는 옵션 (local repository 를 사용 하지 않아도 됨) -->
		<!-- r6-dep.jar 를 local jar 로 선언하여 compile 시에만 사용 -->
		<!-- <dependency>
			<groupId>com.kcube</groupId>
			<artifactId>r6-dep</artifactId>
			<version>${release.version}</version>
			<scope>system</scope>
			<systemPath>${pom.basedir}/lib/r6-dep-${release.version}.jar</systemPath>
		</dependency>

		r6.jar 를 local jar 로 선언하여 compile 시에만 사용 ()
		<dependency>
			<groupId>com.kcube</groupId>
			<artifactId>r6</artifactId>
			<version>${release.version}</version>
			<scope>system</scope>
			<systemPath>${pom.basedir}/lib/r6-${release.version}.jar</systemPath>
		</dependency> -->

		<!-- project 를 추가하면 부모 project 의 provided 항목은 depency 가 되지않음. 따라서 원하는 것은 추가해 줘야함. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<!-- <scope>provided</scope> -->
			<!-- 인터넷이 안되는 환경에서도 사용 가능하게 -->
			<scope>system</scope>
			<systemPath>${pom.basedir}/lib/javax.servlet-api-3.0.1.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.2.1</version>
			<!-- <scope>provided</scope> -->
			<!-- 인터넷이 안되는 환경에서도 사용 가능하게 -->
			<scope>system</scope>
			<systemPath>${pom.basedir}/lib/javax.servlet.jsp-api-2.2.1.jar</systemPath>
		</dependency>

		

		<!-- minify -->
		<dependency>
			<groupId>com.yahoo.platform.yui</groupId>
			<artifactId>yuicompressor</artifactId>
			<version>${yuicompressor.version}</version>
			<!-- 인터넷이 안되는 환경에서도 사용 가능하게 -->
			<scope>system</scope>
			<systemPath>${pom.basedir}/lib/yuicompressor-${yuicompressor.version}.jar</systemPath>
		</dependency>
		<!-- minify -->
	</dependencies>

	<build>
		<finalName>kanban-r6-ext</finalName>

		<!-- 1.8 compile 플러그인 -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- src/main/java 외에 다른 java 소스 폴더도 compile 에 포함시키는 플러그인 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/kanban</source> <!-- 칸반 -->
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- compile 된 파일이 모이는 target/classes 의 모든 properties 파일을 인코딩 하는 플러그인 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>native2ascii-maven-plugin</artifactId>
				<version>2.0.1</version>
				<executions>
					<execution>
						<id>native2ascii-main</id>
						<goals>
							<goal>inplace</goal>
						</goals>
						<phase>process-resources</phase>
						<configuration>
							<dir>target/classes</dir>
							<encoding>${project.build.sourceEncoding}</encoding>
							<includes>
								<include>**/*.properties</include>
							</includes>
							<excludes>
								<exclude></exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- target/classes 에 java 소스 폴더에 있는 xml 과 proerties 파일을 copy 는 플러그인 -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<encoding>${project.build.sourceEncoding}</encoding>
							<resources>
								<resource>
									<directory>src/kanban</directory> <!-- 칸반 -->
									<includes>
										<include>**/*.xml</include>
										<include>**/*.properties</include>
									</includes>
									<excludes>
										<exclude>**/*.conf.xml</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-conf</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes/r6-app/customize</outputDirectory>
							<encoding>${project.build.sourceEncoding}</encoding>
							<overwrite>true</overwrite>
							<resources>
								<resource>
									<directory>src/kanban/com/kcube/kanban</directory> <!-- 칸반 -->
									<includes>
										<include>**.conf.xml</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- ant로 r6 war 파일과 app war 파일을 output folder 에 압축 해제 한 후 알맞게 배치한다. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<!-- 개발 시 r6, r6-app을 release파일을 커밋하지 않고 묶을 때 사용한다. Jenkins, 로컬 개발 등에서 사용함. -->
					<!-- Goals 실행 순서 -->
					<!-- kanban-r6-ext > clean antrun:run@app-dep install -->

					<!-- war 디렉토리에 들어있는 패키지 war 파일들을 output 폴더에 압축해제하는 ant 이다. -->
					<!-- tomcat에 패키지 파일들을 적용하기 위해서는 반드시 로컬 output 디렉토리에 압축해제 해놔야 한다. -->
					<!-- 그리고, output 안에 들어있는 압축해제된 파일들은 절대로 수정해서는 안되고, 수정시에는 파일을 web 밑으로 copy 하여 프로젝트에서 재정의 한다. -->
					<!-- output 디렉토리는 svn:ignore 옵션을 주어 자신의 로컬 이클립스에만 파일이 남아있고 svn 서버에는 동기화 시키지않는다. -->
					<execution>
						<id>app-dep</id>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<ant antfile="${pom.basedir}/ant/app-dep.xml" />
							</target>
						</configuration>
					</execution>
					<!-- ant js 구문을 실행 -->
					<execution>
						<id>js</id>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
							</target>
						</configuration>
					</execution>
					<!-- ant css 구문을 실행 -->
					<execution>
						<id>css</id>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
							</target>
						</configuration>
					</execution>
					<!-- script.language.ver.ext.js의 LANG_VERSION을 변경한다. -->
					<execution>
						<id>script-language-ext</id>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<tstamp>
									<format property="timestamp" pattern="yyMMddHHmmssS" />
								</tstamp>
								<replaceregexp match="LANG_VERSION = '[0-9]*'" replace="LANG_VERSION = '${timestamp}'" flags="g">
									<fileset dir="web" includes="script.language.ver.ext.js" />
								</replaceregexp>
							</target>
						</configuration>
					</execution>
					<!-- script.svg.ver.ext.js의 SVG_VERSION을 변경한다. -->
					<execution>
						<id>script-svg-ext</id>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<tstamp>
									<format property="timestamp" pattern="yyMMddHHmmssS" />
								</tstamp>
								<replaceregexp match="SVG_VERSION = '[0-9]*'" replace="SVG_VERSION = '${timestamp}'" flags="g">
									<fileset dir="web" includes="script.svg.ver.ext.js" />
								</replaceregexp>
							</target>
						</configuration>
					</execution>
					<!-- 라이센스 파일을 개발용, 운영용 으로 변경하는 플러그인 개발용일경우에는 complie phase 만 실행하면 되고, 운영으로 war 를 묶을 시에는 maven install 실행시 Profiles 에 
						real 을 넣어주고 실행하면, license_real.xml 이 license.xml 로 변경된다. -->
					<execution>
						<id>license</id>
						<goals>
							<goal>run</goal>
						</goals>
						<!-- <phase>validate</phase> -->
						<configuration>
							<target>
								<copy overwrite="true" file="src/main/resources/license_${BUILD}.xml" tofile="target/classes/license.xml" />
							</target>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>1.0b3</version>
						<exclusions>
							<exclusion>
								<artifactId>ant</artifactId>
								<groupId>ant</groupId>
							</exclusion>
						</exclusions>
					</dependency>
				</dependencies>
			</plugin>

			<!-- war 로 packaging 하는 플러그인 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<warSourceDirectory>web</warSourceDirectory>
					<webResources>
						<resource>
							<directory>web</directory>
						</resource>
						<resource>
							<directory>output</directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<!-- target 폴더 삭제시 오류 발생하면 무시하는 옵션 (overwrite 하는 부분이 많아서 오류날수 있음) -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>
		</plugins>

		<!-- <extensions> <extension> <groupId>org.apache.maven.archetype</groupId> <artifactId>archetype-packaging</artifactId> 
			<version>3.1.1</version> </extension> </extensions> -->
	</build>
</project>
